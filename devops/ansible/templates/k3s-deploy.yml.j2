apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ app_name }}
  namespace: {{ app_name }}
  labels:
    app: {{ app_name }}
spec:
  replicas: {{ app_replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ app_name }}
  template:
    metadata:
      labels:
        app: {{ app_name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ app_port }}"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: {{ app_name }}
        image: {{ docker_image }}
        resources:
          requests:
            memory: "{{ k8s_resources.requests.memory }}"
            cpu: "{{ k8s_resources.requests.cpu }}"
          limits:
            memory: "{{ k8s_resources.limits.memory }}"
            cpu: "{{ k8s_resources.limits.cpu }}"
        ports:
        - containerPort: {{ app_port }}
          name: http
          protocol: TCP
        envFrom:
        - secretRef:
            name: {{ app_name }}-secrets
        readinessProbe:
          tcpSocket:
            port: {{ app_port }}
          initialDelaySeconds: {{ health_check.initial_delay_seconds }}
          periodSeconds: {{ health_check.period_seconds }}
          timeoutSeconds: {{ health_check.timeout_seconds }}
          successThreshold: {{ health_check.success_threshold }}
          failureThreshold: {{ health_check.failure_threshold }}
        livenessProbe:
          tcpSocket:
            port: {{ app_port }}
          initialDelaySeconds: {{ liveness_probe.initial_delay_seconds }}
          periodSeconds: {{ liveness_probe.period_seconds }}
          timeoutSeconds: {{ liveness_probe.timeout_seconds }}
          failureThreshold: {{ liveness_probe.failure_threshold }}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-external
  namespace: {{ app_name }}
spec:
  type: ExternalName
  externalName: {{ db_host_ip }}
  ports:
  - port: {{ db_port }}
    targetPort: {{ db_port }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ app_name }}-service
  namespace: {{ app_name }}
spec:
  selector:
    app: {{ app_name }}
  ports:
  - port: 80
    targetPort: {{ app_port }}
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ app_name }}-ingress
  namespace: {{ app_name }}
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: traefik
  rules:
    - host: {{ app_domain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ app_name }}-service
                port:
                  number: 80
  tls:
    - hosts:
        - {{ app_domain }}
      secretName: {{ app_name }}-tls-certificate
