---
- name: Deploy webapp with K3s
  hosts: raspberry
  become: yes
  vars:
    app_name: "{{ lookup('env', 'ANSIBLE_APP_NAME') }}"
    app_replicas: "{{ lookup('env', 'ANSIBLE_K3S_REPLICAS') }}"
    cert_manager_email: "valentin.millet39@gmail.com"
    app_domain: "tripr.ovh"
  tasks:
    - name: Get host IP address
      shell: hostname -I | awk '{print $1}'
      register: host_ip_result

    - name: Set db_host_ip variable
      set_fact:
        db_host_ip: "{{ host_ip_result.stdout }}"

    - name: Check if namespace exists
      ansible.builtin.command: "kubectl get namespace {{ app_name }}"
      register: namespace_check
      failed_when: false
      changed_when: false

    - name: Create namespace if it doesn't exist
      ansible.builtin.command: "kubectl create namespace {{ app_name }}"
      when: namespace_check.rc != 0

    - name: Generate Kubernetes Secret YAML
      ansible.builtin.template:
        src: ../templates/k3s-secret.yml.j2
        dest: /tmp/{{ app_name }}-secret.yml # Where to render it on the remote server

    - name: Apply Kubernetes Secret
      ansible.builtin.command: "kubectl apply -f /tmp/{{ app_name }}-secret.yml"
      changed_when: true
      args:
        chdir: /tmp

    - name: Generate K3s cert manager cluster issuer
      ansible.builtin.template:
        src: ../templates/cert-manager-clusterissuer.yml.j2
        dest: /tmp/{{ app_name }}-clusterissuer.yml

    - name: Apply K3s cert manager cluster issuer
      ansible.builtin.command: "kubectl apply -f /tmp/{{ app_name }}-clusterissuer.yml"
      args:
        chdir: /tmp
      changed_when: true

    - name: Generate K3s deployment and service YAML
      ansible.builtin.template:
        src: ../templates/k3s-deploy.yml.j2
        dest: /tmp/{{ app_name }}-deploy.yml

    - name: Apply K3s deployment and service
      ansible.builtin.command: "kubectl apply -f /tmp/{{ app_name }}-deploy.yml"
      args:
        chdir: /tmp
      changed_when: true

    - name: Wait for deployment to be ready
      ansible.builtin.shell: "kubectl rollout status deployment/{{ app_name }} --timeout=300s -n {{ app_name }}"
      register: rollout_status
      until: rollout_status.rc == 0
      retries: 60 # Retry for up to 5 minutes (60 retries * 5s delay)
      delay: 5
      # Using 'shell' for 'kubectl rollout status' is common as there isn't a direct Ansible module that blocks until rollout completion.
      # The '--timeout' flag is important to prevent indefinite waiting.


    - name: Test application health
      ansible.builtin.uri:
        url: "http://127.0.0.1:80"
        method: GET
        status_code: 200
        timeout: 10
        follow_redirects: yes # Important for some health endpoints
      register: health_check
      retries: 12 # Retry health check for up to 1 minute (12 retries * 5s delay)
      delay: 5
      until: health_check.status == 200
      # This task will fail if the health check doesn't return 200 after all retries.

    - name: Display deployment status
      ansible.builtin.debug:
        msg: |
          Deployment successful!
          App: {{ app_name }}
          Image: {{ lookup('env', 'ANSIBLE_DOCKER_IMAGE') }}
          URL: http://127.0.0.1:80
          Status: {{ health_check.status }}
      when: health_check.status == 200 # Only display success message if health check passed

    - name: Rollback on health check failure
      ansible.builtin.shell: "kubectl rollout undo deployment/{{ app_name }} -n {{ app_name }}"
      when: health_check.failed | default(false) # Only run if the 'health_check' task failed
      ignore_errors: yes # Ensure the playbook continues even if rollback fails

    - name: Clean up temp files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/{{ app_name }}-secret.yml"
        - "/tmp/{{ app_name }}-deploy.yml"
        - "/tmp/{{ app_name }}-clusterissuer.yml"
