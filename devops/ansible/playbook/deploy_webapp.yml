---
# Web Application Deployment Playbook
#
# This playbook deploys the Tripr Spring Boot application to K3s cluster.
# It creates namespaces, applies secrets, configures SSL certificates,
# and deploys the application with health checks and rollback capabilities.
#
# Variables used:
# - app_name: Application name for Kubernetes resources
# - app_replicas: Number of application replicas
# - app_domain: Domain name for the application
# - cert_manager_email: Email for SSL certificate registration
# - docker_image: Docker image for the application
# - All database, mail, and security configuration variables
#
# Tags: webapp, deployment, kubernetes, namespace, secrets, certificates, verification, rollback
- name: Deploy webapp with K3s
  hosts: raspberry
  become: yes
  tags:
    - webapp
    - deployment
    - kubernetes

  tasks:
    - name: Get host IP address
      shell: hostname -I | awk '{print $1}'
      register: host_ip_result

    - name: Set db_host_ip variable
      set_fact:
        db_host_ip: "{{ host_ip_result.stdout }}"

    - name: Check if namespace exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: "{{ app_name }}"
      register: namespace_check
      failed_when: false
      changed_when: false
      tags:
        - webapp
        - namespace

    - name: Create namespace if it doesn't exist
      kubernetes.core.k8s:
        name: "{{ app_name }}"
        api_version: v1
        kind: Namespace
        state: present
      when: namespace_check.api_found is defined and not namespace_check.api_found
      tags:
        - webapp
        - namespace

    - name: Generate Kubernetes Secret YAML
      ansible.builtin.template:
        src: ../templates/k3s-secret.yml.j2
        dest: /tmp/{{ app_name }}-secret.yml # Where to render it on the remote server

    - name: Apply Kubernetes Secret
      kubernetes.core.k8s:
        state: present
        src: "/tmp/{{ app_name }}-secret.yml"
      tags:
        - webapp
        - secrets

    - name: Generate K3s cert manager cluster issuer
      ansible.builtin.template:
        src: ../templates/cert-manager-clusterissuer.yml.j2
        dest: /tmp/{{ app_name }}-clusterissuer.yml

    - name: Apply K3s cert manager cluster issuer
      kubernetes.core.k8s:
        state: present
        src: "/tmp/{{ app_name }}-clusterissuer.yml"
      tags:
        - webapp
        - certificates

    - name: Generate K3s deployment and service YAML
      ansible.builtin.template:
        src: ../templates/k3s-deploy.yml.j2
        dest: /tmp/{{ app_name }}-deploy.yml

    - name: Apply K3s deployment and service
      kubernetes.core.k8s:
        state: present
        src: "/tmp/{{ app_name }}-deploy.yml"
      tags:
        - webapp
        - deployment

    - name: Wait for deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_name }}"
        namespace: "{{ app_name }}"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300
      register: deployment_status
      tags:
        - webapp
        - verification


    - name: Test application health
      ansible.builtin.uri:
        url: "http://127.0.0.1:80"
        method: GET
        status_code: 200
        timeout: 10
        follow_redirects: yes
        headers:
          Host: "{{ app_domain }}"
      register: health_check
      retries: 12
      delay: 5
      until: health_check.status == 200

    - name: Display deployment status
      ansible.builtin.debug:
        msg: |
          Deployment successful!
          App: {{ app_name }}
          Image: {{ docker_image }}
          URL: http://127.0.0.1:80
          Status: {{ health_check.status }}
      when: health_check.status == 200
      tags:
        - webapp
        - verification

    - name: Rollback on health check failure
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ app_name }}"
            namespace: "{{ app_name }}"
            annotations:
              deployment.kubernetes.io/revision: "{{ (deployment_status.resources[0].metadata.annotations['deployment.kubernetes.io/revision'] | int) - 1 }}"
        merge_type: strategic-merge
      when: health_check.failed | default(false)
      ignore_errors: yes
      tags:
        - webapp
        - rollback

    - name: Clean up temp files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/{{ app_name }}-secret.yml"
        - "/tmp/{{ app_name }}-deploy.yml"
        - "/tmp/{{ app_name }}-clusterissuer.yml"
