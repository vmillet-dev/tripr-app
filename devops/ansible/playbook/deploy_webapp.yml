---
- name: Deploy webapp with K3s
  hosts: raspberry
  become: yes
  vars:
    app_name: "{{ lookup('env', 'ANSIBLE_APP_NAME') }}"
    k3s_template_filename: "k3s-deploy.yml"
  tasks:
    - name: Create Kubernetes Secret for Spring Boot app
      ansible.builtin.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ app_name }}-secrets"
          stringData:
            MAIL_HOST: "{{ lookup('env', 'ANSIBLE_MAIL_HOST') }}"
            MAIL_PORT: "{{ lookup('env', 'ANSIBLE_MAIL_PORT') }}"
            MAIL_USERNAME: "{{ lookup('env', 'ANSIBLE_MAIL_USERNAME') }}"
            MAIL_PASSWORD: "{{ lookup('env', 'ANSIBLE_MAIL_PASSWORD') }}"
            DB_HOST: "{{ lookup('env', 'ANSIBLE_DB_HOST') }}"
            DB_PORT: "{{ lookup('env', 'ANSIBLE_DB_PORT') }}"
            DB_NAME: "{{ lookup('env', 'ANSIBLE_DB_NAME') }}"
            DB_USERNAME: "{{ lookup('env', 'ANSIBLE_DB_USERNAME') }}"
            DB_PASSWORD: "{{ lookup('env', 'ANSIBLE_DB_PASSWORD') }}"
            JWT_SECRET: "{{ lookup('env', 'ANSIBLE_JWT_SECRET') }}"
            BASE_URL: "{{ lookup('env', 'ANSIBLE_BASE_URL') }}"

    - name: Generate K3s deployment and service YAML
      ansible.builtin.template:
        src: "{{ k3s_template_filename }}.j2"
        dest: "/tmp/{{ k3s_template_filename }}"

    - name: Apply K3s deployment and service
      ansible.builtin.command: "kubectl apply -f /tmp/{{ k3s_template_filename }}"
      args:
        chdir: /tmp
      changed_when: true

    - name: Wait for deployment to be ready
      shell: kubectl rollout status deployment/{{ app_name }} --timeout=300s

    - name: Get service details
      shell: |
        kubectl get service {{ app_name }}-service \
        -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || \
        kubectl get service {{ app_name }}-service \
        -o jsonpath='{.spec.clusterIP}'
      register: service_ip
      retries: 10
      delay: 10
      until: service_ip.stdout != ""

    - name: Test application health
      uri:
        url: "http://{{ service_ip.stdout }}:80{{ health_check_path | default('/') }}"
        method: GET
        status_code: 200
        timeout: 10
      register: health_check
      retries: 12
      delay: 5
      until: health_check.status == 200

    - name: Display deployment status
      debug:
        msg: |
          Deployment successful!
          App: {{ app_name }}
          Image: {{ lookup('env', 'ANSIBLE_DOCKER_IMAGE') }}
          URL: http://{{ service_ip.stdout }}:80/
          Status: {{ health_check.status }}

    - name: Rollback on health check failure
      shell: kubectl rollout undo deployment/{{ app_name }}
      when: health_check.failed | default(false)
      ignore_errors: yes

    - name: Clean up temp files
      file:
        path: /tmp/{{ app_name }}-deployment.yaml
        state: absent

  rescue:
    - name: Display logs on error
      shell: kubectl logs -l app={{ app_name }} --tail=50
      register: app_logs
      ignore_errors: yes

    - name: Display Kubernetes events
      shell: kubectl get events --sort-by=.metadata.creationTimestamp
      register: k8s_events
      ignore_errors: yes

    - name: Debug info
      debug:
        msg: |
          Application logs:
          {{ app_logs.stdout | default('No logs available') }}

          Kubernetes events:
          {{ k8s_events.stdout | default('No events available') }}
