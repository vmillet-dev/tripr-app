---
- name: Deploy webapp with K3s
  hosts: raspberry
  become: yes
  vars:
    app_name: "{{ lookup('env', 'ANSIBLE_APP_NAME') }}"
  tasks:
    - name: Generate Kubernetes Secret YAML
      ansible.builtin.template:
        src: k3s-secret.yml.j2
        dest: /tmp/{{ app_name }}-secret.yml # Where to render it on the remote server

    - name: Apply Kubernetes Secret
      ansible.builtin.command: "kubectl apply -f /tmp/{{ app_name }}-secret.yml"
      changed_when: true
      args:
        chdir: /tmp

    - name: Generate K3s deployment and service YAML
      ansible.builtin.template:
        src: k3s-deploy.yml.j2
        dest: /tmp/{{ app_name }}-deploy.yml

    - name: Apply K3s deployment and service
      ansible.builtin.command: "kubectl apply -f /tmp/{{ app_name }}-deploy.yml"
      args:
        chdir: /tmp
      changed_when: true

    - name: Wait for deployment to be ready
      ansible.builtin.shell: "{{ ansible_env.KUBECONFIG | default('') }} kubectl rollout status deployment/{{ app_name }}-deployment --timeout=300s -n {{ app_name }}"
      register: rollout_status
      until: rollout_status.rc == 0
      retries: 60 # Retry for up to 5 minutes (60 retries * 5s delay)
      delay: 5
      # Using 'shell' for 'kubectl rollout status' is common as there isn't a direct Ansible module that blocks until rollout completion.
      # The '--timeout' flag is important to prevent indefinite waiting.

    - name: Get service details (LoadBalancer IP or ClusterIP)
      ansible.builtin.shell: |
        set -euo pipefail
        # Try to get LoadBalancer IP first
        SERVICE_IP=$(kubectl get service {{ app_name }}-service -n {{ app_name }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
        echo "$SERVICE_IP"
      register: service_ip
      retries: 10 # Retry getting IP for up to 100 seconds (10 retries * 10s delay)
      delay: 10
      until: service_ip.stdout is defined and service_ip.stdout != ""
      # The '2>/dev/null' suppresses errors if LoadBalancer IP is not yet available.
      # The 'if [ -z "$SERVICE_IP" ]' checks if the LoadBalancer IP is empty and falls back to ClusterIP.

    - name: Test application health
      ansible.builtin.uri:
        url: "http://{{ service_ip.stdout }}:80"
        method: GET
        status_code: 200
        timeout: 10
        follow_redirects: yes # Important for some health endpoints
      register: health_check
      retries: 12 # Retry health check for up to 1 minute (12 retries * 5s delay)
      delay: 5
      until: health_check.status == 200
      # This task will fail if the health check doesn't return 200 after all retries.

    - name: Display deployment status
      ansible.builtin.debug:
        msg: |
          Deployment successful!
          App: {{ app_name }}
          Image: {{ lookup('env', 'ANSIBLE_DOCKER_IMAGE') }}
          URL: http://{{ service_ip.stdout }}:80
          Status: {{ health_check.status }}
      when: health_check.status == 200 # Only display success message if health check passed

    - name: Rollback on health check failure
      ansible.builtin.shell: "kubectl rollout undo deployment/{{ app_name }}-deployment -n {{ app_name }}"
      when: health_check.failed | default(false) # Only run if the 'health_check' task failed
      ignore_errors: yes # Ensure the playbook continues even if rollback fails

    - name: Clean up temp files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/{{ app_name }}-secret.yml"
        - "/tmp/{{ app_name }}-deploy.yml"
