---
# PostgreSQL Installation and Configuration Playbook
#
# This playbook installs PostgreSQL server, creates application database and user,
# configures network access for Kubernetes pods, and sets up proper privileges.
#
# Variables used:
# - db_name: Database name for the application
# - db_user: Database username for the application
# - db_password: Database password for the application
# - pg_version: PostgreSQL version to install
# - postgresql.data_dir: PostgreSQL data directory path
#
# Tags: postgresql, database, setup, privileges, configuration
- name: Install and configure PostgreSQL
  hosts: raspberry
  become: yes
  vars_files:
    - group_vars/all.yml
  tags:
    - postgresql
    - database
    - setup

  tasks:
    - name: Get pod CIDR addresses
      shell: kubectl get nodes -o jsonpath='{.items[*].spec.podCIDR}'
      register: pod_cidr_result

    - name: Set pod_cidr_result variable
      set_fact:
        pod_cidr_ip: "{{ pod_cidr_result.stdout }}"

    - name: Install postgresql-common to get APT configuration script
      apt:
        name: postgresql-common
        state: present

    - name: Check if PostgreSQL APT source is already present
      ansible.builtin.find:
        paths:
          - /etc/apt/sources.list.d
        patterns: "*postgresql*"
      register: pgsql_apt_source_files

    - name: Check PostgreSQL APT source in main sources.list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list
        regexp: "apt.postgresql.org"
        state: absent
      check_mode: yes
      register: pgsql_main_source_check
      changed_when: false

    - name: Execute pgdg apt script if PostgreSQL APT source is not found
      command: "/usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -y"
      when:
        - pgsql_apt_source_files.files | length == 0
        - not pgsql_main_source_check.found
      changed_when: true

    - name: Install PostgreSQL and its dependencies
      apt:
        name:
          - "postgresql-{{ pg_version }}"
          - "postgresql-client-{{ pg_version }}"
          - python3-psycopg2
        state: present

    - name: Ensure PostgreSQL is started and enabled
      systemd:
        name: "postgresql@{{ pg_version }}-main"
        state: started
        enabled: yes

    - name: Create PostgreSQL user
      become_user: postgres
      community.postgresql.postgresql_user:
        db: "{{ db_name }}"
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: present

    - name: Create PostgreSQL database
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        owner: "{{ db_user }}"
        state: present

    - name: Grant privileges on database
      become_user: postgres
      community.postgresql.postgresql_privs:
        db: "{{ db_name }}"
        role: "{{ db_user }}"
        privs: ALL
        type: database
        state: present

    - name: Grant privileges on schema
      become_user: postgres
      community.postgresql.postgresql_privs:
        db: "{{ db_name }}"
        role: "{{ db_user }}"
        privs: ALL
        type: schema
        obj: public
        state: present

    - name: Check if user has table privileges
      become_user: postgres
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        query: "SELECT COUNT(*) FROM information_schema.table_privileges WHERE grantee = '{{ db_user }}' AND privilege_type = 'SELECT';"
      register: table_privileges_check
      changed_when: false

    - name: Grant privileges on existing tables
      become_user: postgres
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        query: "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {{ db_user }};"
      when: table_privileges_check.query_result[0].count | int == 0
      tags:
        - postgresql
        - privileges

    - name: Check if default privileges are set
      become_user: postgres
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        query: "SELECT COUNT(*) FROM pg_default_acl WHERE defaclrole = (SELECT oid FROM pg_roles WHERE rolname = '{{ db_user }}');"
      register: default_privileges_check
      changed_when: false

    - name: Grant privileges on future tables
      become_user: postgres
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        query: "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO {{ db_user }};"
      when: default_privileges_check.query_result[0].count | int == 0
      tags:
        - postgresql
        - privileges

    - name: Allow local network access in pg_hba.conf
      lineinfile:
        path: "{{ postgresql.data_dir }}/pg_hba.conf"
        insertafter: "^# TYPE.*DATABASE.*USER.*ADDRESS.*METHOD"
        line: "host    all             all            {{ pod_cidr_ip }}           md5"
        state: present
      notify: Restart PostgreSQL
      tags:
        - postgresql
        - configuration

    - name: Set listen_addresses to '*'
      lineinfile:
        path: "{{ postgresql.data_dir }}/postgresql.conf"
        regexp: '^#?listen_addresses\s*='
        line: "listen_addresses = '*'"
      notify: Restart PostgreSQL
      tags:
        - postgresql
        - configuration

    - name: Show success message
      debug:
        msg: "The database '{{ db_name }}' and the user '{{ db_user }}' have been successfully created and configured."

  handlers:
    - name: Restart PostgreSQL
      systemd:
        name: postgresql
        state: restarted
