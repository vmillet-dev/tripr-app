[versions]
kotlin = "1.9.20"
spring-boot = "3.2.0"
spring-dependency-management = "1.1.4"
coroutines = "1.7.3"
logback = "1.4.11"
mockk = "1.13.8"
junit-platform = "1.10.1"
janino = "3.1.10"
auth0-jwt = "4.4.0"
spring-security = "6.2.0"
postgresql = "42.7.2"
liquibase = "4.25.1"
springdoc-openapi = "2.3.0"
testcontainers = "1.19.3"
archunit = "1.2.1"
micrometer-prometheus = "1.12.0"

[libraries]
# Spring Boot
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-mail = { module = "org.springframework.boot:spring-boot-starter-mail" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-docker-compose = { module = "org.springframework.boot:spring-boot-docker-compose" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer-prometheus" }

# Kotlin
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }

# Coroutines
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "coroutines" }
kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }

# Logging
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
janino = { module = "org.codehaus.janino:janino", version.ref = "janino" }

# Testing
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher", version.ref = "junit-platform" }

# JWT Authentication
auth0-java-jwt = { module = "com.auth0:java-jwt", version.ref = "auth0-jwt" }

# Database
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }

# Liquibase
liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase" }

# Swagger UI
springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc-openapi" }

# TestContainers
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

# ArchUnit
archunit-junit5 = { module = "com.tngtech.archunit:archunit-junit5", version.ref = "archunit" }

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }

[bundles]
spring-boot = ["spring-boot-starter-validation", "spring-boot-starter-web", "spring-boot-starter-webflux"]
kotlin = ["kotlin-reflect", "jackson-module-kotlin"]
coroutines = ["kotlinx-coroutines-core", "kotlinx-coroutines-reactor", "kotlinx-coroutines-slf4j"]
logging = ["logback-classic", "janino"]
testing = ["spring-boot-starter-test", "kotlin-test-junit5", "mockk", "kotlinx-coroutines-test", "junit-platform-launcher"]
monitoring = ["spring-boot-starter-actuator", "micrometer-registry-prometheus"]
