name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('backend/gradle/wrapper/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      - name: Build backend
        working-directory: backend
        run: ./gradlew assemble

  test-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('backend/gradle/wrapper/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      - name: Run backend tests
        working-directory: backend
        run: ./gradlew test

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  test-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: |
          npm run test

  e2e-tests:
    runs-on: ubuntu-latest
    container:
      image: cypress/included
      options: --privileged
    services:
      docker:
        image: docker:dind
        options: --privileged
      postgresql:
        image: postgres:17.3
        ports:
          - 5434:5432
        env:
          POSTGRES_DB: tripr
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: P4ssword!
      mailpit:
        image: axllent/mailpit:v1.23
        ports:
          - 1027:1025
          - 8027:8025
          #needs: [ test-backend, test-frontend ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install basics software's
        run: |
          apt update
          apt install -y curl sudo gpg lsb-release iptables

      - name: Set up Docker
        uses: docker/setup-docker-action@v4

      - name: Build docker image app
        working-directory: e2e
        run: docker build -t app-e2e -f ../devops/Dockerfile ../

      - name: Run docker image
        run: |
          docker run -d \
          --name app-e2e \
          -p 8080:8081 \
          -e DB_HOST=host.docker.internal \
          -e DB_PORT=5434 \
          -e DB_NAME=tripr \
          -e DB_USERNAME=postgres \
          -e DB_PASSWORD='P4ssword!' \
          -e MAIL_HOST=host.docker.internal \
          -e MAIL_PORT=1027 \
          -e MAIL_USERNAME='' \
          -e MAIL_PASSWORD='' \
          -e JWT_SECRET='verySecretKeyThatShouldBeAtLeast32CharactersLong' \
          -e BASE_URL='localhost:8080' \
          app-e2e

      - name: Check docker images
        run: docker ps && sleep 10 && docker ps && docker ps && docker ps

      - name: Cypress run
        working-directory: e2e
        run: |
          npm i
          npm run cypress:ci
