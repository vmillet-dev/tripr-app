name: Build and Test

on:
  push:
  #branches-ignore: [ main ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  NODE_VERSION: '22'

jobs:
  test-ssh:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/production.key
          chmod 600 ~/.ssh/production.key
          cat >>~/.ssh/config <<END
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/production.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SERVER_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}

      - name: Install Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible

      - name: Create Ansible inventory
        working-directory: devops/ansible
        run: |
          cat > inventory.ini << EOF
          [raspberry]
          ${{ secrets.SERVER_HOST }} ansible_user=${{ secrets.SERVER_USERNAME }} ansible_ssh_private_key_file=~/.ssh/production.key
          EOF

      - name: Run ansible playbook
        working-directory: devops/ansible
        run: |
          ansible-playbook -i inventory.ini main.yml
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      - name: Build backend
        working-directory: backend
        run: ./gradlew assemble

  test-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      - name: Run backend tests
        working-directory: backend
        run: ./gradlew test

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  test-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [ test-backend, test-frontend ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build docker image app
        working-directory: e2e
        run: docker compose -f ../devops/compose-e2e.yaml up -d --wait app-e2e

      - name: Cypress run
        working-directory: e2e
        run: |
          npm i
          npm run cypress:ci

      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: e2e/cypress/screenshots

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "=== Debug Info on Failure ==="
          docker ps -a
          docker logs devops-app-e2e-1
