name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('backend/gradle/wrapper/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      - name: Build backend
        working-directory: backend
        run: ./gradlew assemble

  test-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('backend/gradle/wrapper/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      - name: Run backend tests
        working-directory: backend
        run: ./gradlew test

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  test-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: |
          npm run test

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build docker image app
        working-directory: e2e
        run: docker compose -f ../devops/compose-e2e.yaml up -d --wait app-e2e

      - name: Check container status and logs
        working-directory: devops
        run: |
          echo "=== Container Status ==="
          docker ps -a
          echo ""
          echo "=== Container Logs ==="
          docker compose logs app-e2e
          echo ""
          echo "=== Container Inspect ==="
          docker image inspect devops-app-e2e --format='{{.State.Status}}: {{.State.ExitCode}}'
          if [ "$(docker image inspect devops-app-e2e --format='{{.State.Status}}')" != "running" ]; then
            echo "Container is not running!"
            exit 1
          fi

      - name: Test database connectivity from container
        run: |
          echo "=== Testing DB connectivity from container ==="
          docker exec devops-app-e2e sh -c "nc -zv localhost 5434 || echo 'DB connection failed'"

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to be ready on port 8080..."
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8080 2>/dev/null || curl -f http://localhost:8080 2>/dev/null; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $((attempt+1))/$max_attempts: Application not ready yet..."
            sleep 10

            # VÃ©rifier si le conteneur est encore en vie
            if [ "$(docker inspect devops-app-e2e --format='{{.State.Status}}')" != "running" ]; then
              echo "Container stopped running! Logs:"
              docker logs devops-app-e2e
              exit 1
            fi

            attempt=$((attempt+1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "Application failed to start within timeout"
            echo "Final container logs:"
            docker logs devops-app-e2e
            exit 1
          fi

      - name: Final status check
        run: |
          echo "=== Final Container Status ==="
          docker ps
          echo ""
          echo "=== Final Logs ==="
          docker logs devops-app-e2e --tail 50

      - name: Cypress run
        working-directory: e2e
        run: |
          npm i
          npm run cypress:ci

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "=== Debug Info on Failure ==="
          docker ps -a
          docker logs devops-app-e2e
          docker image inspect devops-app-e2e
