name: OpenRewrite Recipe Check

on:
  schedule:
    # Run weekly on Monday at 1:00 AM UTC
    - cron: '0 1 * * 1'
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  check-backend-recipes:
    name: Check Backend Recipes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      # The OpenRewrite plugin is now permanently added to the build.gradle.kts file
          
      - name: List available OpenRewrite recipes
        working-directory: backend
        run: ./gradlew rewriteDiscover > backend-recipes.txt

      - name: Check for applicable recipes
        working-directory: backend
        id: check-backend-recipes
        run: |
          # Create a temporary directory for recipe results
          mkdir -p recipe-results
          
          # Read the list of recipes and check each one
          cat backend-recipes.txt | grep -E "org\.openrewrite\.[^[:space:]]+" | while read -r recipe; do
            recipe_name=$(echo "$recipe" | tr -d '[:space:]')
            echo "Checking recipe: $recipe_name"
            
            # Skip certain recipes that are not applicable or too broad
            if [[ "$recipe_name" == "org.openrewrite.DeleteSourceFiles" || 
                  "$recipe_name" == "org.openrewrite.FindSourceFiles" || 
                  "$recipe_name" == "org.openrewrite.FindParseFailures" ]]; then
              echo "Skipping system recipe: $recipe_name"
              continue
            fi
            
            # Create a branch for this recipe
            git checkout -b openrewrite/backend-$recipe_name
            
            # Add the recipe to the build.gradle.kts file temporarily
            sed -i "/rewrite {/a\\    activeRecipe(\"$recipe_name\")" build.gradle.kts
            
            # Run the recipe to see if it would make changes
            ./gradlew rewriteDryRun > recipe-results/$recipe_name.txt 2>&1 || true
            
            # Check if the recipe would make changes
            if grep -q "changes have been made" recipe-results/$recipe_name.txt; then
              echo "Recipe $recipe_name would make changes"
              
              # Apply the recipe
              ./gradlew rewriteRun
              
              # Commit and push changes
              git config --local user.email "github-actions[bot]@users.noreply.github.com"
              git config --local user.name "GitHub Actions"
              git add .
              git commit -m "Apply OpenRewrite recipe: $recipe_name"
              
              # Create PR with detailed description
              recipe_description=$(grep -A 5 "$recipe_name" backend-recipes.txt | tail -n +2)
              pr_body="# OpenRewrite Recipe: $recipe_name\n\n"
              pr_body+="## Description\n$recipe_description\n\n"
              pr_body+="This PR was automatically generated by the OpenRewrite Recipe Check workflow."
              
              echo "$pr_body" > pr-body.txt
              gh pr create --title "Backend: Apply OpenRewrite recipe $recipe_name" --body-file pr-body.txt
              
              # Return to main branch for next recipe
              git checkout main
            else
              echo "Recipe $recipe_name would not make changes"
              git checkout main
              git branch -D openrewrite/backend-$recipe_name
            fi
            
            # Reset the build.gradle.kts file to remove the temporary recipe
            git checkout -- build.gradle.kts
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-frontend-recipes:
    name: Check Frontend Recipes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Setup Java for OpenRewrite
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # OpenRewrite has limited support for JavaScript/TypeScript
      # We'll use the available recipes that work with these languages
      
      - name: Install OpenRewrite CLI
        run: |
          mkdir -p ~/openrewrite
          cd ~/openrewrite
          curl -L https://github.com/openrewrite/rewrite/releases/latest/download/rewrite-cli.jar -o rewrite-cli.jar
          chmod +x rewrite-cli.jar
          echo "OpenRewrite CLI installed at ~/openrewrite/rewrite-cli.jar"

      - name: Check for applicable recipes for frontend
        working-directory: frontend
        id: check-frontend-recipes
        run: |
          # Create a temporary directory for recipe results
          mkdir -p recipe-results
          
          # List of OpenRewrite recipes that work with JavaScript/TypeScript
          # These are limited but we'll use what's available
          RECIPES=(
            "org.openrewrite.javascript.format.TabsAndIndents"
            "org.openrewrite.javascript.format.Spaces"
            "org.openrewrite.javascript.format.AutoFormat"
            "org.openrewrite.json.format.AutoFormat"
            "org.openrewrite.typescript.format.TabsAndIndents"
            "org.openrewrite.typescript.format.Spaces"
            "org.openrewrite.typescript.format.AutoFormat"
          )
          
          for recipe in "${RECIPES[@]}"; do
            echo "Checking recipe: $recipe"
            
            # Create a branch for this recipe
            git checkout -b openrewrite/frontend-$recipe
            
            # Run the recipe to see if it would make changes
            java -jar ~/openrewrite/rewrite-cli.jar --recipe $recipe --dry-run . > recipe-results/$(echo $recipe | tr '.' '-').txt 2>&1 || true
            
            # Check if the recipe would make changes
            if grep -q "changes have been made" recipe-results/$(echo $recipe | tr '.' '-').txt; then
              echo "Recipe $recipe would make changes"
              
              # Apply the recipe
              java -jar ~/openrewrite/rewrite-cli.jar --recipe $recipe .
              
              # Commit and push changes
              git config --local user.email "github-actions[bot]@users.noreply.github.com"
              git config --local user.name "GitHub Actions"
              git add .
              git commit -m "Apply OpenRewrite recipe: $recipe"
              
              # Create PR with detailed description
              pr_body="# OpenRewrite Recipe: $recipe\n\n"
              pr_body+="## Description\n"
              pr_body+="This recipe applies code formatting and style improvements to the frontend codebase.\n\n"
              pr_body+="This PR was automatically generated by the OpenRewrite Recipe Check workflow."
              
              echo "$pr_body" > pr-body.txt
              gh pr create --title "Frontend: Apply OpenRewrite recipe $recipe" --body-file pr-body.txt
              
              # Return to main branch for next recipe
              git checkout main
            else
              echo "Recipe $recipe would not make changes"
              git checkout main
              git branch -D openrewrite/frontend-$recipe
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
