name: OpenRewrite Recipe Check

on:
  schedule:
    # Run weekly on Monday at 1:00 AM UTC
    - cron: '0 1 * * 1'
  # Allow manual triggering for testing
  workflow_dispatch:

jobs:
  check-backend-recipes:
    name: Check Backend Recipes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission to Gradle wrapper
        working-directory: backend
        run: chmod +x gradlew

      - name: Add OpenRewrite plugin if not present
        working-directory: backend
        run: |
          if ! grep -q "org.openrewrite.rewrite" build.gradle.kts; then
            sed -i '/plugins {/a\\    id("org.openrewrite.rewrite") version "6.10.0"' build.gradle.kts
            echo "// OpenRewrite configuration" >> build.gradle.kts
            echo "rewrite {" >> build.gradle.kts
            echo '    activeRecipe("org.openrewrite.java.format.AutoFormat")' >> build.gradle.kts
            echo "}" >> build.gradle.kts
          fi
          
      - name: List available OpenRewrite recipes
        working-directory: backend
        run: ./gradlew rewriteDiscover > backend-recipes.txt

      - name: Check for applicable recipes
        working-directory: backend
        id: check-backend-recipes
        run: |
          # Create a temporary directory for recipe results
          mkdir -p recipe-results
          
          # Read the list of recipes and check each one
          cat backend-recipes.txt | grep -E "org\.openrewrite\.[^[:space:]]+" | while read -r recipe; do
            recipe_name=$(echo "$recipe" | tr -d '[:space:]')
            echo "Checking recipe: $recipe_name"
            
            # Create a branch for this recipe
            git checkout -b openrewrite/backend-$recipe_name
            
            # Run the recipe in dry-run mode to see if it would make changes
            ./gradlew rewriteRun --recipe $recipe_name --dryRun > recipe-results/$recipe_name.txt
            
            # Check if the recipe would make changes
            if grep -q "Changes made by recipe" recipe-results/$recipe_name.txt; then
              echo "Recipe $recipe_name would make changes"
              
              # Apply the recipe
              ./gradlew rewriteRun --recipe $recipe_name
              
              # Commit and push changes
              git config --local user.email "github-actions[bot]@users.noreply.github.com"
              git config --local user.name "GitHub Actions"
              git add .
              git commit -m "Apply OpenRewrite recipe: $recipe_name"
              
              # Create PR with detailed description
              recipe_description=$(grep -A 5 "$recipe_name" backend-recipes.txt | tail -n +2)
              pr_body="# OpenRewrite Recipe: $recipe_name\n\n"
              pr_body+="## Description\n$recipe_description\n\n"
              pr_body+="This PR was automatically generated by the OpenRewrite Recipe Check workflow."
              
              echo "$pr_body" > pr-body.txt
              gh pr create --title "Backend: Apply OpenRewrite recipe $recipe_name" --body-file pr-body.txt
              
              # Return to main branch for next recipe
              git checkout main
            else
              echo "Recipe $recipe_name would not make changes"
              git checkout main
              git branch -D openrewrite/backend-$recipe_name
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-frontend-recipes:
    name: Check Frontend Recipes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      # Note: OpenRewrite doesn't have official JavaScript/TypeScript support yet
      # This is a placeholder for when it becomes available
      # For now, we'll use a simple check for potential upgrades using npm-check-updates
      
      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for dependency updates
        working-directory: frontend
        id: check-frontend-updates
        run: |
          # Check for updates and save to a file
          ncu --jsonUpgraded > frontend-updates.json
          
          # Parse the JSON and create PRs for each update
          if [ -s frontend-updates.json ]; then
            echo "Updates available"
            
            # Use jq to parse the JSON if it's installed
            if command -v jq &> /dev/null; then
              jq -r 'to_entries | .[] | .key + ":" + .value' frontend-updates.json | while read -r update; do
                package=$(echo "$update" | cut -d':' -f1)
                version=$(echo "$update" | cut -d':' -f2)
                
                # Create a branch for this update
                git checkout -b openrewrite/frontend-update-$package
                
                # Update just this package
                cd frontend
                npm install $package@$version --save
                
                # Commit and push changes
                git config --local user.email "github-actions[bot]@users.noreply.github.com"
                git config --local user.name "GitHub Actions"
                git add .
                git commit -m "Update frontend dependency: $package to $version"
                
                # Create PR with detailed description
                pr_body="# Frontend Dependency Update: $package\n\n"
                pr_body+="## Update Details\n"
                pr_body+="- Package: $package\n"
                pr_body+="- New Version: $version\n\n"
                pr_body+="This PR was automatically generated by the OpenRewrite Recipe Check workflow."
                
                echo "$pr_body" > pr-body.txt
                gh pr create --title "Frontend: Update dependency $package to $version" --body-file pr-body.txt
                
                # Return to main branch for next update
                git checkout main
              done
            else
              echo "jq not available, using basic parsing"
              # Fallback parsing if jq is not available
              # This is a simplified version and may not handle all cases correctly
              grep -o '"[^"]*":"[^"]*"' frontend-updates.json | while read -r update; do
                package=$(echo "$update" | cut -d':' -f1 | tr -d '"')
                version=$(echo "$update" | cut -d':' -f2 | tr -d '"')
                
                # Create a branch for this update
                git checkout -b openrewrite/frontend-update-$package
                
                # Update just this package
                cd frontend
                npm install $package@$version --save
                
                # Commit and push changes
                git config --local user.email "github-actions[bot]@users.noreply.github.com"
                git config --local user.name "GitHub Actions"
                git add .
                git commit -m "Update frontend dependency: $package to $version"
                
                # Create PR with detailed description
                pr_body="# Frontend Dependency Update: $package\n\n"
                pr_body+="## Update Details\n"
                pr_body+="- Package: $package\n"
                pr_body+="- New Version: $version\n\n"
                pr_body+="This PR was automatically generated by the OpenRewrite Recipe Check workflow."
                
                echo "$pr_body" > pr-body.txt
                gh pr create --title "Frontend: Update dependency $package to $version" --body-file pr-body.txt
                
                # Return to main branch for next update
                git checkout main
              done
            fi
          else
            echo "No updates available"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
